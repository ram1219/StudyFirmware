
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000907  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	07 d0       	rcall	.+14     	; 0xc2 <main>
  b4:	b8 c0       	rjmp	.+368    	; 0x226 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <getch>:
unsigned int DoReMi[8] = {523, 587, 659, 698, 783, 880, 987, 1046};

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);			// 데이터를 받을때까지 대기
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <getch>
	data = UDR0;							// 수신된 데이터는 UDR0에 저장되어 있다
  bc:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  be:	5f 9a       	sbi	0x0b, 7	; 11
	return data;							// 읽어온 문자를 반환한다.
}
  c0:	08 95       	ret

000000c2 <main>:

int main()
{
	unsigned char Rx_data = 0;			
	
	DDRE = 0x0E;							// Rx(입력 0), Tx(출력, 1)
  c2:	8e e0       	ldi	r24, 0x0E	; 14
  c4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x80;							// 포트B의 PA3을 출력포트로 설정 
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	87 bb       	out	0x17, r24	; 23
	
	TCCR1A |= 0x0A;							// 0000 1010 (1<<WGM11) | (1<<COM1C1)
  ca:	8f b5       	in	r24, 0x2f	; 47
  cc:	8a 60       	ori	r24, 0x0A	; 10
  ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0x19;							// 0001 1001 (1<<WGM13) | (1<<WGM12) | (1<<CS10)
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	89 61       	ori	r24, 0x19	; 25
  d4:	8e bd       	out	0x2e, r24	; 46
	TCCR1C |= 0x00;							// PWM에선 C 안 씀
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x0000; 
  de:	1d bc       	out	0x2d, r1	; 45
  e0:	1c bc       	out	0x2c, r1	; 44
	
	UCSR0A = 0x00;
  e2:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
  ee:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	89 b9       	out	0x09, r24	; 9
	
	ICR1 = 10;
  f6:	6a e0       	ldi	r22, 0x0A	; 10
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	77 bd       	out	0x27, r23	; 39
  fc:	66 bd       	out	0x26, r22	; 38
	OCR1C = ICR1/10;
  fe:	86 b5       	in	r24, 0x26	; 38
 100:	97 b5       	in	r25, 0x27	; 39
 102:	3f d0       	rcall	.+126    	; 0x182 <__udivmodhi4>
 104:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 108:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	{
		Rx_data = getch();
		
		if((Rx_data >= '0') && (Rx_data <= '7' ))
		{
			ICR1 = 7372800 / DoReMi[Rx_data - '0'];
 10c:	c1 2c       	mov	r12, r1
 10e:	90 e8       	ldi	r25, 0x80	; 128
 110:	d9 2e       	mov	r13, r25
 112:	90 e7       	ldi	r25, 0x70	; 112
 114:	e9 2e       	mov	r14, r25
 116:	f1 2c       	mov	r15, r1
			OCR1C = ICR1 / 10;
 118:	ca e0       	ldi	r28, 0x0A	; 10
	OCR1C = ICR1/10;

	
	while(1)
	{
		Rx_data = getch();
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	cd df       	rcall	.-102    	; 0xb8 <getch>
		
		if((Rx_data >= '0') && (Rx_data <= '7' ))
 11e:	90 ed       	ldi	r25, 0xD0	; 208
 120:	98 0f       	add	r25, r24
 122:	98 30       	cpi	r25, 0x08	; 8
 124:	d8 f7       	brcc	.-10     	; 0x11c <main+0x5a>
		{
			ICR1 = 7372800 / DoReMi[Rx_data - '0'];
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e0 56       	subi	r30, 0x60	; 96
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	20 81       	ld	r18, Z
 134:	31 81       	ldd	r19, Z+1	; 0x01
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	c7 01       	movw	r24, r14
 13c:	b6 01       	movw	r22, r12
 13e:	35 d0       	rcall	.+106    	; 0x1aa <__divmodsi4>
 140:	37 bd       	out	0x27, r19	; 39
 142:	26 bd       	out	0x26, r18	; 38
			OCR1C = ICR1 / 10;
 144:	86 b5       	in	r24, 0x26	; 38
 146:	97 b5       	in	r25, 0x27	; 39
 148:	be 01       	movw	r22, r28
 14a:	1b d0       	rcall	.+54     	; 0x182 <__udivmodhi4>
 14c:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 150:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9b e0       	ldi	r25, 0x0B	; 11
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x98>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xa2>
 164:	00 00       	nop
			
			_delay_ms(500);
			
			TCCR1A |= 0x0A;
 166:	8f b5       	in	r24, 0x2f	; 47
 168:	8a 60       	ori	r24, 0x0A	; 10
 16a:	8f bd       	out	0x2f, r24	; 47
			ICR1 = 10;
 16c:	d7 bd       	out	0x27, r29	; 39
			OCR1C = ICR1/10;
 16e:	c6 bd       	out	0x26, r28	; 38
 170:	86 b5       	in	r24, 0x26	; 38
 172:	97 b5       	in	r25, 0x27	; 39
 174:	be 01       	movw	r22, r28
 176:	05 d0       	rcall	.+10     	; 0x182 <__udivmodhi4>
 178:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 17c:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 180:	cd cf       	rjmp	.-102    	; 0x11c <main+0x5a>

00000182 <__udivmodhi4>:
 182:	aa 1b       	sub	r26, r26
 184:	bb 1b       	sub	r27, r27
 186:	51 e1       	ldi	r21, 0x11	; 17
 188:	07 c0       	rjmp	.+14     	; 0x198 <__udivmodhi4_ep>

0000018a <__udivmodhi4_loop>:
 18a:	aa 1f       	adc	r26, r26
 18c:	bb 1f       	adc	r27, r27
 18e:	a6 17       	cp	r26, r22
 190:	b7 07       	cpc	r27, r23
 192:	10 f0       	brcs	.+4      	; 0x198 <__udivmodhi4_ep>
 194:	a6 1b       	sub	r26, r22
 196:	b7 0b       	sbc	r27, r23

00000198 <__udivmodhi4_ep>:
 198:	88 1f       	adc	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	5a 95       	dec	r21
 19e:	a9 f7       	brne	.-22     	; 0x18a <__udivmodhi4_loop>
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	bc 01       	movw	r22, r24
 1a6:	cd 01       	movw	r24, r26
 1a8:	08 95       	ret

000001aa <__divmodsi4>:
 1aa:	05 2e       	mov	r0, r21
 1ac:	97 fb       	bst	r25, 7
 1ae:	16 f4       	brtc	.+4      	; 0x1b4 <__divmodsi4+0xa>
 1b0:	00 94       	com	r0
 1b2:	0f d0       	rcall	.+30     	; 0x1d2 <__negsi2>
 1b4:	57 fd       	sbrc	r21, 7
 1b6:	05 d0       	rcall	.+10     	; 0x1c2 <__divmodsi4_neg2>
 1b8:	14 d0       	rcall	.+40     	; 0x1e2 <__udivmodsi4>
 1ba:	07 fc       	sbrc	r0, 7
 1bc:	02 d0       	rcall	.+4      	; 0x1c2 <__divmodsi4_neg2>
 1be:	46 f4       	brtc	.+16     	; 0x1d0 <__divmodsi4_exit>
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <__negsi2>

000001c2 <__divmodsi4_neg2>:
 1c2:	50 95       	com	r21
 1c4:	40 95       	com	r20
 1c6:	30 95       	com	r19
 1c8:	21 95       	neg	r18
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	4f 4f       	sbci	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255

000001d0 <__divmodsi4_exit>:
 1d0:	08 95       	ret

000001d2 <__negsi2>:
 1d2:	90 95       	com	r25
 1d4:	80 95       	com	r24
 1d6:	70 95       	com	r23
 1d8:	61 95       	neg	r22
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	8f 4f       	sbci	r24, 0xFF	; 255
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__udivmodsi4>:
 1e2:	a1 e2       	ldi	r26, 0x21	; 33
 1e4:	1a 2e       	mov	r1, r26
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	fd 01       	movw	r30, r26
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <__udivmodsi4_ep>

000001ee <__udivmodsi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	ee 1f       	adc	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	a2 17       	cp	r26, r18
 1f8:	b3 07       	cpc	r27, r19
 1fa:	e4 07       	cpc	r30, r20
 1fc:	f5 07       	cpc	r31, r21
 1fe:	20 f0       	brcs	.+8      	; 0x208 <__udivmodsi4_ep>
 200:	a2 1b       	sub	r26, r18
 202:	b3 0b       	sbc	r27, r19
 204:	e4 0b       	sbc	r30, r20
 206:	f5 0b       	sbc	r31, r21

00000208 <__udivmodsi4_ep>:
 208:	66 1f       	adc	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	1a 94       	dec	r1
 212:	69 f7       	brne	.-38     	; 0x1ee <__udivmodsi4_loop>
 214:	60 95       	com	r22
 216:	70 95       	com	r23
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	bd 01       	movw	r22, r26
 222:	cf 01       	movw	r24, r30
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
